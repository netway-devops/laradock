name: 'Usptream Sync From laradock/laradock'

on:
  schedule:
    - cron: "0 0 1,15 * *" # At 00:00 on day-of-month 1 and 15.
  workflow_dispatch: # click the button on Github repo!

jobs:
  sync_latest_from_upstream:
    name: Sync latest commits from upstream repo
    runs-on: ubuntu-latest
 
    steps:
    
    - name: Set branch name to ENV
      run: echo "UPDATE_BRANCH_NAME=update/sync-from-upstream-repo-$(date +'%Y-%m-%d')" >> $GITHUB_ENV
    
    - name: Create new branch
      uses: peterjgrainger/action-create-branch@v2.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        branch: ${{ env.UPDATE_BRANCH_NAME }}
    
    # REQUIRED step
    # Step 1: run a standard checkout action, provided by github
    - name: Checkout target repo
      uses: actions/checkout@v2
      with:
        # optional: set the branch to checkout,
        # sync action checks out your 'target_sync_branch' anyway
        ref:  ${{ env.UPDATE_BRANCH_NAME }}
        # REQUIRED if your upstream repo is private (see wiki)
        # persist-credentials: false
        
    # REQUIRED step
    # Step 2: run the sync action
    - name: Sync upstream changes
      id: sync
      uses: aormsby/Fork-Sync-With-Upstream-action@v3.2
      with:
        target_sync_branch: ${{ env.UPDATE_BRANCH_NAME }}
        # REQUIRED 'target_repo_token' exactly like this!
        target_repo_token: ${{ secrets.TOKEN }}
        upstream_sync_branch: master
        upstream_sync_repo: laradock/laradock
        # Set test_mode true to run tests instead of the true action!!
        test_mode: false
        #git_config_pull_rebase: true
        target_branch_push_args: "--force"
        git_config_user: "klaarnut"
        git_config_email: "arnut@netway.co.th"
        shallow_since: "2 weeks ago"
      
    # Step 3: Display a sample message based on the sync output var 'has_new_commits'
    - name: New commits found
      if: steps.sync.outputs.has_new_commits == 'true'
      run: |
        echo "New commits were found to sync."
        echo ${{ steps.sync.outputs.has_new_commits }}
    
    - name: Create Pull Request to main
      if: steps.sync.outputs.has_new_commits == 'true'
      uses: repo-sync/pull-request@v2
      with:
        source_branch: ${{ env.UPDATE_BRANCH_NAME }}        # If blank, default: triggered branch
        destination_branch: "main"                          # If blank, default: master
        pr_title: "Pulling ${{ github.ref }} into main"     # Title of pull request
        #pr_body: ":crown: *An automated PR*"              # Full markdown support, requires pr_title to be set
        #pr_template: ".github/PULL_REQUEST_TEMPLATE.md"   # Path to pull request template, requires pr_title to be set, excludes pr_body
        #pr_reviewer: "wei,worker"                         # Comma-separated list (no spaces)
        #pr_assignee: "wei,worker"                         # Comma-separated list (no spaces)
        #pr_label: "auto-pr"                               # Comma-separated list (no spaces)
        #pr_milestone: "Milestone 1"                       # Milestone name
        #pr_draft: true                                    # Creates pull request as draft
        #pr_allow_empty: true                              # Creates pull request even if there are no changes
        github_token: ${{ secrets.TOKEN }}
    
    - name: No new commits
      if: steps.sync.outputs.has_new_commits == 'false'
      run: echo "There were no new commits."
    
      
      
